# Print a message from Hacker Mouse with yellow text (like cheese)
Write-Host "Hello from hacker mouse!" -ForegroundColor Yellow

# Let's create a new file
# BuT first hackermouse must check if a file already exists
$MouseFile = "hackermouse.txt"
if (Test-Path $MouseFile -PathType leaf)  {
    Write-Host "I found some cheese (the file exists already)"
}
else {
    Write-Host "I can't find cheese here (the file doesn't exist)"
}

New-Item .\hackermouse.txt

# Now let's add a line of text to it
Set-Content .\hackermouse.txt 'Welcome from HackerMouse'

# Read the file and output it's contents
Get-Content .\hackermouse.txt

# Now lets' add another line
Add-Content .\hackermouse.txt -Value 'Hackermouse loves cheese!'

# Now lets read the file again
Get-Content .\hackermouse.txt

# Now let's hunt for the cheese STRING (the word 'cheese')
Select-String -Path hackermouse.txt -pattern 'cheese'

# This will return "hackermouse.txt:2:Hackermouse loves cheese!" which is the filename, line number and the contents of the line
# We can do this another way using this command, this command will search all files in the current directory path for any files named hackermouse.txt with the string 'cheese'
Get-ChildItem -Path .\ -Include hackermouse.txt -Recurse | Select-String -Pattern 'cheese'

# Now let's look how we could hunt for cheese in the CTF
New-Item .\hackermouse-flag1.txt

# Now let's add a line of text to it with a flag in it!
Set-Content .\hackermouse-flag1.txt 'This is a flag! cheese{f03a8dae-acd9-471e-b69c-5b9b528e33ce}'

# Read the file and output it's contents
Get-Content .\hackermouse-flag1.txt

# To hunt for complex patterns we need to use REGULAR EXPRESSIONS (REGEX)
# Now this looks super complex but when we break it down it becomes clearer
# We are hunting for a pattern that starts with 'cheese' then starts with { (we use \ as an escape character) then we want to find 8 letters or numbers followed by a - and then more of the same with different patterns!
$Regex = "cheese(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}"
Select-String -Path .\hackermouse-flag1.txt -Pattern $regex -AllMatches | % { $_.Matches } | % { $_.Value }
# Awesome we can hunt for cheese strings ;) (get it!)

# Now let's try and find the flag on the HackerMouse website!
# Hackermouse is going to use Invoke-WebRequest with the URI paramater and then provide it the SITE: https://myhackermouse.com/
Invoke-WebRequest -URI https://myhackermouse.com/

# Now this will sent an HTTP request to the site and place all that data into an object, so this time let's put that into a variable
$MouseScraper = Invoke-WebRequest -URI https://myhackermouse.com/

# Now let's list all the properties and methods
$MouseScraper | Get-Member

# now we'll output the RAW response content (this includes the HTTP response header!)
$MouseScraper.RawContent

# Now we want to see if we can find any cheese strings :D
# This is re-declaring the same variable as we used before but i'm doing this for demo purposes
$Regex = "cheese(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}"

# Creates a varialbe 'cheesehunter' by outputing the contents of the MouseScrapper.Rawncontent property and PIPE that into the next command (the search command)
$Cheesehunter = $MouseScraper.RawContent | select-string -Pattern $Regex -AllMatches | % { $_.Matches } | % { $_.Value }
Write-Host $Cheesehunter -ForegroundColor Yellow

# Remove the file
Remove-Item .\hackermouse.txt

# Get the operating system name from Windows Management Instrumentation
(Get-CimInstance Win32_OperatingSystem).Name
(Get-CimInstance Win32_OperatingSystem).Version

# Hackermouse can see this is an object maybe we can get all the properites from Win32_OperatingSystem
# Create a variable walled WMIQuery and put the contents of 'Get-CimInstance Win32_OperatingSystem' into that
$WMIQuery = Get-CimInstance Win32_OperatingSystem

#Now we want to iterate through each 'object'
foreach ($Object in $WMIQuery) {
    Write-Host $Object

    # Each object has properties
    Write-Host $Object.Caption
    Write-Host $Object.BuildNumber
    Write-Host $Object.Manufacturer
    Write-Host $Object.WindowsDirectory
    Write-Host $Object.OSArchitecture
    Write-Host $Object.OSLanguage
}

# Hackermouse want's to know all of the properties and methods this class has! let's do that with get-member
Get-CimInstance Win32_OperatingSystem | Get-Member

# Some other cool hackermouse things we can do is work with folder
# List directory contents (this is what actually runs when you run the 'dir' command in PowerShell)
Get-ChildItem
